from aiogram import F, Router, html
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.keyboards import menu_keyboard, withdraw_keyboard
from app.states import Register
from app.db.requests import (
    create_user, 
    user_exists,
    nickname_exists,
    delete_user,
    get_user
)

user_router = Router()

@user_router.message(CommandStart())
async def start(message: Message) -> None:
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥–æ—Ä–æ–≥–æ–π {html.bold(message.from_user.full_name)}!\n" +
        f"\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –æ—Ç –≥—Ä—É–ø–ø—ã {html.link("–ü–∞–Ω–∞–º–µ—Ä–∞", "https://t.me/panamera221")}.\n" +
        f"–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ {html.italic("—Ç—É—Ä–Ω–∏—Ä")}\n–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {html.italic("–ø—Ä–æ—Ñ–∏–ª—è")}\n" +
        f"–≤—ã–±–µ—Ä–∏—Ç–µ {html.bold("–∫–Ω–æ–ø–∫–∏")} –Ω–∏–∂–µ. ‚¨áÔ∏è",
        reply_markup=menu_keyboard
    )
    
@user_router.message(F.text == "üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def register(message: Message, state: FSMContext) -> None:
    if await user_exists(message.from_user.id):
        await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=menu_keyboard)
    else:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ.")
        await state.set_state(Register.nickname)

@user_router.message(F.text == "üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message) -> None:
    if await user_exists(message.from_user.id):
        user = await get_user(message.from_user.id)
        await message.answer(f"–í–∞—à –Ω–∏–∫–Ω–µ–π–º: {html.bold(user.nickname)}\n" +
                             f"–°—Ç–∞—Ç—É—Å: {html.bold("–û–ø–ª–∞—á–µ–Ω" if user.paid else "–ù–µ–æ–ø–ª–∞—á–µ–Ω")}",
                             reply_markup=withdraw_keyboard)
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n" +
                             "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                             reply_markup=menu_keyboard)

@user_router.message(F.text, Register.nickname)
async def set_nickname(message: Message, state: FSMContext) -> None:
    nickname: str = message.text.strip()
    
    if await nickname_exists(nickname):
        await message.answer(f"–ù–∏–∫–Ω–µ–π–º {nickname} –∑–∞–Ω—è—Ç.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º.")
    else:    
        await create_user(message.from_user.id, message.from_user.username, nickname)            
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω–∏–∫–æ–º {html.bold(nickname)}.", reply_markup=menu_keyboard)
        await state.clear()

@user_router.callback_query(F.data == "withdraw")
async def withdraw(callback: CallbackQuery) -> None:
    await delete_user(callback.from_user.id)
    await callback.message.delete()
    await callback.message.answer("–í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å —Ç—É—Ä–Ω–∏—Ä–∞.", reply_markup=menu_keyboard)